C51 COMPILER V9.59.0.0   12864                                                             03/03/2023 11:17:13 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE 12864
OBJECT MODULE PLACED IN 12864.OBJ
COMPILER INVOKED BY: D:\keil5\C51\BIN\C51.EXE 12864.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "reg52.h"
   2          #include <intrins.h>
   3          #include "delay.h"
   4          #include "showtemperature.h"
   5          /*TS12864A-3 端口定义*/
   6          #define LCD_data  P0             //数据口
   7          #define BASIC_SET  0x30
   8          #define EXTEND_SET 0x34
   9          #define DRAW_ON    0x36
  10          #define DRAW_OFF   0x34
  11          sbit LCD_RS  =  P2^6;            //寄存器选择输入
  12          sbit LCD_RW  =  P2^5;            //液晶读/写控制
  13          sbit LCD_EN  =  P2^7;            //液晶使能控制
  14          sbit LCD_PSB =  P3^2;            //串/并方式控制
  15          //sbit wela    =  P2^6;
  16          //sbit dula    =  P2^7;
  17          uchar k,a,b;
  18          #define delayNOP(); {_nop_();_nop_();_nop_();_nop_();};
  19          void delay0(uchar x);  //x*0.14MS
  20          void beep();
  21          void lcd_pos(uchar X,uchar Y);  //确定显示位置
  22          
  23          
  24          /*检查LCD忙状态                                                    */
  25          /*lcd_busy为1时，忙，等待。lcd-busy为0时,闲，可写指令与数据。      */
  26          bit lcd_busy()
  27          {
  28   1          bit result;
  29   1          LCD_RS = 0;
  30   1          LCD_RW = 1;
  31   1          LCD_EN = 1;
  32   1          delayNOP();
  33   1          result = (bit)(P0&0x80);
  34   1          LCD_EN = 0;
  35   1          return(result);
  36   1      }
  37          
  38          
  39          /*写指令数据到LCD                                                  */
  40          /*RS=L，RW=L，E=高脉冲，D0-D7=指令码。                             */
  41          void lcd_wcmd(uchar cmd)
  42          {
  43   1          while(lcd_busy());
  44   1          LCD_RS = 0;
  45   1          LCD_RW = 0;
  46   1          LCD_EN = 0;
  47   1          _nop_();
  48   1          _nop_();
  49   1          P0 = cmd;
  50   1          delayNOP();
  51   1          LCD_EN = 1;
  52   1          delayNOP();
  53   1          LCD_EN = 0;
  54   1      }
  55          
C51 COMPILER V9.59.0.0   12864                                                             03/03/2023 11:17:13 PAGE 2   

  56          /*写显示数据到LCD                                                  */
  57          /*RS=H，RW=L，E=高脉冲，D0-D7=数据。                               */
  58          void lcd_wdat(uchar dat)
  59          {
  60   1          while(lcd_busy());
  61   1          LCD_RS = 1;
  62   1          LCD_RW = 0;
  63   1          LCD_EN = 0;
  64   1          P0 = dat;
  65   1          delayNOP();
  66   1          LCD_EN = 1;
  67   1          delayNOP();
  68   1          LCD_EN = 0;
  69   1      }
  70          
  71          
  72          /*  LCD初始化设定                                                  */
  73          void lcd_init()
  74          {
  75   1      
  76   1          LCD_PSB = 1;         //并口方式
  77   1      //    wela=0;
  78   1      //    dula=0;
  79   1          lcd_wcmd(0x34);      //扩充指令操作
  80   1          delay(5);
  81   1          lcd_wcmd(0x30);      //基本指令操作
  82   1          delay(5);
  83   1          lcd_wcmd(0x0C);      //显示开，关光标
  84   1          delay(5);
  85   1          lcd_wcmd(0x01);      //清除LCD的显示内容
  86   1          delay(5);
  87   1      }
  88          
  89          
  90          /* 设定显示位置                                          */
  91          //void lcd_pos(uchar X,uchar Y)
  92          //{
  93          //    X&=0x0f;
  94          //    if (Y==0)
  95          //    {
  96          //        X|=0x80;
  97          //    }
  98          //    else if (Y==1)
  99          //    {
 100          //        X|=0x90;
 101          //    }
 102          //    else if (Y==2)
 103          //    {
 104          //        X|=0x88;
 105          //    }
 106          //    else if (Y==3)
 107          //    {
 108          //        X|=0x98;
 109          //    }
 110          //    lcd_wcmd(X);     //显示地址
 111          //}
 112          
 113          void lcd_showstring(uchar x,uchar y,uchar *str)
 114          {
 115   1          if(y<=0)y=0;
 116   1          if(y>3)y=3;
 117   1          x&=0x0f;  //限制x,y不能大于显示范围
C51 COMPILER V9.59.0.0   12864                                                             03/03/2023 11:17:13 PAGE 3   

 118   1      
 119   1          switch(y)
 120   1          {
 121   2          case 0:
 122   2              x|=0x80;
 123   2              break;//第1行地址+x的偏移
 124   2          case 1:
 125   2              x|=0x90;
 126   2              break;//第2行地址+x的偏移
 127   2          case 2:
 128   2              x|=0x88;
 129   2              break;//第3行地址+x的偏移
 130   2          case 3:
 131   2              x|=0x98;
 132   2              break;//第4行地址+x的偏移
 133   2          }
 134   1          lcd_wcmd(x);
 135   1          while(*str!='\0')
 136   1          {
 137   2              lcd_wdat(*str);
 138   2              str++;
 139   2          }
 140   1      
 141   1      }
 142          
 143          //uchar read_dat(void)
 144          //{
 145          //    uchar temp;
 146          //    P0 = 0XFF;
 147          ////释放数据线
 148          //    LCD_RS = 1;
 149          ////数据
 150          //    LCD_RW = 1;
 151          //// 读模式
 152          //    LCD_EN = 1;
 153          ////E为高电平进行读数据或指令
 154          //    delay(1);
 155          //    temp = P0;
 156          //    LCD_EN = 0;
 157          //    return temp;
 158          //}
 159          
 160          ////绘图显示的清屏函数（因清屏指令在画图时不能用）
 161          
 162          
 163          //void gui_clear()
 164          //{
 165          //    uchar i, j, k;
 166          //    lcd_wcmd(EXTEND_SET);//扩展指令集，8位数据传输
 167          //    lcd_wcmd(DRAW_OFF);//绘图显示关闭
 168          //    for(i = 0; i < 2; i ++)//分上下两屏写
 169          //    {
 170          //        for(j = 0; j < 32; j ++)
 171          //        {
 172          //            lcd_wcmd(0x80 + j);//写y坐标
 173          //            delay(1);
 174          //            if(i == 0) //写x坐标
 175          //            {
 176          //                lcd_wcmd(0x80);
 177          //                delay(1);
 178          //            }
 179          //            else      //写下半屏
C51 COMPILER V9.59.0.0   12864                                                             03/03/2023 11:17:13 PAGE 4   

 180          //            {
 181          //                lcd_wcmd(0x88);
 182          //                delay(1);
 183          //            }
 184          //            for(k = 0; k < 16; k ++)//写一整行数据
 185          //            {
 186          //                lcd_wdat(0x00);//写高字节
 187          //                lcd_wdat(0x00);//写低字节
 188          //                delay(1);
 189          //            }
 190          
 191          //        }
 192          //    }
 193          //    lcd_wcmd(DRAW_ON);//打开绘图显示
 194          //    lcd_wcmd(BASIC_SET);//打开基本指令集
 195          //}
 196          ////（给定坐标并打点的）任意位置打点函数
 197          //void lcd_set_dot(uchar x,uchar y)
 198          //{
 199          //    uchar x_byte,x_bit;   //确定在坐标的那一字节哪一位
 200          //    uchar y_ping, y_bit;     //确定在坐标的哪一屏哪一行
 201          //    uchar tmph, tmpl;    //定义两个临时变量，用于存放读出来的数据
 202          //    lcd_wcmd(EXTEND_SET);    //扩展指令集
 203          //    lcd_wcmd(DRAW_OFF);        //绘图显示关闭
 204          //    x_byte = x / 16;        //算出在哪一字节，注意一个地址是16位的
 205          //    x_bit = x % 16;        //& 0x0f;//算出在哪一位
 206          //    y_ping = y / 32;        //确定在上半屏还是下半屏，0代表上半屏，1代表下半屏
 207          //    y_bit = y % 32;        //& 0x1f;//确定在第几行
 208          //    lcd_wcmd(0X80 + y_bit);//先写垂直地址（最高位必须）
 209          //    lcd_wcmd(0x80 + x_byte + 8 * y_ping);//水平坐标，下半屏坐标起始地址为0x88，（+8*y_ping）就是用来确定
             -上半屏还是下半屏
 210          //    read_dat();//预读取数据
 211          //    tmph = read_dat();//读取当前显示高8位数据
 212          //    tmpl = read_dat();//读取当前显示低8位数据
 213          //    delay(1);
 214          //    lcd_wcmd(0x80 + y_bit);//读操作会改变AC，所以重新设置一下
 215          //    lcd_wcmd(0x80 + x_byte + 8 * y_ping);
 216          //    delay(1);
 217          //    if(x_bit < 8)
 218          //    {
 219          //        lcd_wdat(tmph | (0x01 << (7 - x_bit)));//写高字节，因为坐标是从左向右的，GDRAM高位在昨，低位在右
 220          //        lcd_wdat(tmpl);//原低位数据送回
 221          //    }
 222          //    else
 223          //    {
 224          //        lcd_wdat(tmph);//原高位数据送回
 225          //        lcd_wdat(tmpl | (0x01 << (15 - x_bit)));
 226          //    }
 227          //    lcd_wcmd(DRAW_ON); //打开绘图显示
 228          //    lcd_wcmd(BASIC_SET);//回到基本指令集
 229          //}
 230          ////画水平线函数
 231          ////x0、x1为起始点和终点的水平坐标，y为垂直坐标
 232          ////**********************************************************
 233          //void gui_hline(uchar x0, uchar x1, uchar y)
 234          //{
 235          //    uchar bak;//用于对两个数互换的中间变量，使x1为大值
 236          //    if(x0 > x1)
 237          //    {
 238          //        bak = x1;
 239          //        x1 = x0;
 240          //        x0 = bak;
C51 COMPILER V9.59.0.0   12864                                                             03/03/2023 11:17:13 PAGE 5   

 241          //    }
 242          //    do
 243          //    {
 244          //        lcd_set_dot(x0, y); //从左到右逐点显示
 245          //        x0 ++;
 246          //    }
 247          //    while(x1 >= x0);
 248          //}
 249          ////***********画竖直线函数***********************************//
 250          ////x为起始点和终点的水平坐标，y0、y1为垂直坐标***************//
 251          ////**********************************************************//
 252          //void gui_rline(uchar x, uchar y0, uchar y1)
 253          //{
 254          //    uchar bak;//用于对两个数互换的中间变量，使y1为大值
 255          //    if(y0 > y1)
 256          //    {
 257          //        bak = y1;
 258          //        y1 = y0;
 259          //        y0 = bak;
 260          //    }
 261          //    do
 262          //    {
 263          //        lcd_set_dot(x, y0); //从上到下逐点显示
 264          //        y0++;
 265          
 266          //    }
 267          //    while(y1 >= y0);
 268          //}
 269          ////*********任意两点间画直线*********************************//
 270          ////x0、y0为起始点坐标，x1、y1为终点坐标**********************//
 271          ////**********************************************************//
 272          //void gui_line(uchar x0, uchar y0, uchar x1, uchar y1)
 273          //{
 274          //    char dx;        //直线x轴差值
 275          //    char dy;        //直线y轴差值
 276          //    char dx_sym;        //x轴增长方向，为-1时减值方向，为1时增值方向
 277          //    char dy_sym;        //y轴增长方向，为-1时减值方向，为1时增值方向
 278          //    char dx_x2;        //dx*2值变量，用于加快运算速度
 279          //    char dy_x2;        //dy*2值变量，用于加快运算速度
 280          //    char di;   //决策变量
 281          //    if(x0 == x1)//判断是否为垂直线
 282          //    {
 283          //        gui_rline(x0, y0, y1);  //画垂直线
 284          //        return;
 285          //    }
 286          //    if(y0 == y1)//判断是否为水平线
 287          //    {
 288          //        gui_hline(x0, x1, y0);  //画水平线
 289          //        return;
 290          //    }
 291          //    dx = x1 - x0;//求取两点之间的差值
 292          //    dy = y1 - y0;//****判断增长方向，或是否为水平线、垂直线、点*//
 293          //    if(dx > 0)//判断x轴方向
 294          //        dx_sym = 1;
 295          //    else
 296          //    {
 297          //        if(dx < 0)
 298          //            dx_sym = -1;
 299          //        else
 300          //        {
 301          //            gui_rline(x0, y0, y1);
 302          //            return;
C51 COMPILER V9.59.0.0   12864                                                             03/03/2023 11:17:13 PAGE 6   

 303          //        }
 304          //    }
 305          //    if(dy > 0)//判断y轴方向
 306          //        dy_sym = 1;
 307          //    else
 308          //    {
 309          //        if(dy < 0)
 310          //            dy_sym = -1;
 311          //        else
 312          //        {
 313          //            gui_hline(x0, x1, y0);
 314          //            return;
 315          //        }
 316          //    }
 317          //    /*将dx、dy取绝对值***********/
 318          //    dx = dx_sym * dx;
 319          //    dy = dy_sym * dy;
 320          //    /****计算2倍的dx、dy值*******/
 321          //    dx_x2 = dx * 1;//我改为了一倍，这样才跟真实的两点对应
 322          //    dy_x2 = dy * 1;    /***使用bresenham法进行画直线***/
 323          //    if(dx >= dy)//对于dx>=dy，使用x轴为基准
 324          //    {
 325          //        di = dy_x2 - dx;
 326          //        while(x0 != x1)
 327          //        {
 328          //            lcd_set_dot(x0,y0);
 329          //            x0 +=dx_sym;
 330          //            if(di < 0)
 331          //                di += dy_x2;//计算出下一步的决策值
 332          //            else
 333          //            {
 334          //                di += dy_x2 - dx_x2;
 335          //                y0 += dy_sym;
 336          //            }
 337          //        }
 338          //        lcd_set_dot(x0, y0);//显示最后一点
 339          //    }
 340          //    else  //对于dx<dy使用y轴为基准
 341          //    {
 342          //        di = dx_x2 - dy;
 343          //        while(y0 != y1)
 344          //        {
 345          //            lcd_set_dot(x0, y0);
 346          //            y0 += dy_sym;
 347          //            if(di < 0)
 348          //                di += dx_x2;
 349          //            else
 350          //            {
 351          //                di += dx_x2 - dy_x2;
 352          //                x0 += dx_sym;
 353          //            }
 354          //        }
 355          //        lcd_set_dot(x0, y0);//显示最后一点
 356          //    }
 357          //}
 358          
 359          
 360          //void display()
 361          //{
 362          //    uint shi,ge;
 363          //    shi=wendu[0]-'0';
 364          //    ge=wendu[1]-'0';
C51 COMPILER V9.59.0.0   12864                                                             03/03/2023 11:17:13 PAGE 7   

 365          //    if(k==100)
 366          //    {
 367          //        ++i;
 368          //        k=0;
 369          //        if(i>127)
 370          //        {
 371          //            i=0;
 372          //            a=0;
 373          //            b=0;
 374          //            gui_clear();//画图时清屏函数
 375          //            gui_line(0,15,0,63);
 376          //            gui_line(0,63,127,63);
 377          //        }
 378          //        gui_line(a,63-b,i,63-shi*10-ge);
 379          //        b=shi*10+ge;
 380          //        a=i;
 381          //    }
 382          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    205    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
